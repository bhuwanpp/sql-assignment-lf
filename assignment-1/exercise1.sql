-- CREATE TABLE FOR PRODUCTS 
 create table PRODUCTS(
 PRODUCT_ID INT primary key ,
 PRODUCT_NAME VARCHAR(255) not null,
CATEGORY VARCHAR(255),
 PRICE INT not null
)
--  TABLE FOR ORDERS
create table ORDERS(
ORDER_ID INT primary key, 
CUSTOMER_NAME VARCHAR(255) not null, 
PRODUCT_ID INT , 
QUANTITY FLOAT(8) , 
ORDER_DATE DATE,
foreign key(PRODUCT_ID)
references PRODUCTS(PRODUCT_ID)
);
--  INSERT INTO PRODUCTS
insert
	into
	PRODUCTS (PRODUCT_ID,
	PRODUCT_NAME,
	CATEGORY,
	PRICE)
values
    (1,
'PRODUCT A',
'CATEGORY 1',
10),
    (2,
'PRODUCT B',
'CATEGORY 2',
20),
    (3,
'PRODUCT C',
'CATEGORY 1',
30);
--  INSERT INTO ORDERS 
insert
	into
	ORDERS (ORDER_ID,
	CUSTOMER_NAME,
	PRODUCT_ID,
	QUANTITY,
	ORDER_DATE)
values
    (1,
'CUSTOMER 1',
1,
2,
'2024-06-01'),
    (2,
'CUSTOMER 2',
2,
3,
'2024-06-02'),
    (3,
'CUSTOMER 1',
3,
1,
'2024-06-03'),
    (4,
'CUSTOMER 3',
1,
4,
'2024-06-04'),
    (5,
'CUSTOMER 2',
3,
2,
'2024-06-05'),
    (6,
'CUSTOMER 3',
2,
1,
'2024-06-06');
-- UPDATE 
update
	ORDERS
set
	CUSTOMER_NAME = 'BOB'
where
	PRODUCT_ID = 1;
--  DELETE 
delete
from
	ORDERS
where
	ORDER_ID = 5;
--  Q->CALCULATE THE TOTAL QUANTITY ORDERED FOR EACH PRODUCT CATEGORY IN THE ORDERS TABLE.

select
	PRODUCTS.CATEGORY ,
	SUM(ORDERS.QUANTITY) as TOTAL_QUANTITY_ORDRED
from
	PRODUCTS
inner join ORDERS on
	PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT_ID
group by
	PRODUCTS.CATEGORY;
--  WITHOUT JOIN 
 select
	PRODUCTS.CATEGORY,
	SUM(ORDERS.QUANTITY) as TOTAL_QUANTITY_ORDERED
from
	PRODUCTS,
	ORDERS
where
	PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT_ID
group by
	PRODUCTS.CATEGORY;
--  Q -> FIND CATEGORIES WHERE THE TOTAL NUMBER OF PRODUCTS ORDERED IS GREATER THAN 5. 

select
	PRODUCTS.CATEGORY ,
	SUM(ORDERS.QUANTITY) as TOTAL_QUANTITY_ORDRED
from
	PRODUCTS
inner join ORDERS on
	PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT_ID
group by
	PRODUCTS.CATEGORY
having
	SUM(ORDERS.QUANTITY)>5;
