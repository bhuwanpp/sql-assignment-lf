-- CREATE TABLE FOR PRODUCTS 
 CREATE TABLE PRODUCTS(
 PRODUCT_ID INT PRIMARY KEY  ,
 PRODUCT_NAME VARCHAR(255) NOT NULL,
CATEGORY VARCHAR(255),
 PRICE INT NOT NULL
)
--  TABLE FOR ORDERS
CREATE TABLE ORDERS(
ORDER_ID INT PRIMARY KEY, 
CUSTOMER_NAME VARCHAR(255) NOT NULL, 
PRODUCT_ID INT , 
QUANTITY FLOAT(8) , 
ORDER_DATE DATE,
FOREIGN KEY(PRODUCT_ID)
REFERENCES PRODUCTS(PRODUCT_ID)
);

--  INSERT INTO PRODUCTS
INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE)
VALUES
    (1, 'PRODUCT A', 'CATEGORY 1', 10),
    (2, 'PRODUCT B', 'CATEGORY 2', 20),
    (3, 'PRODUCT C', 'CATEGORY 1', 30);

	--  INSERT INTO ORDERS 
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_NAME, PRODUCT_ID, QUANTITY, ORDER_DATE)
VALUES
    (1, 'CUSTOMER 1', 1, 2, '2024-06-01'),
    (2, 'CUSTOMER 2', 2, 3, '2024-06-02'),
    (3, 'CUSTOMER 1', 3, 1, '2024-06-03'),
    (4, 'CUSTOMER 3', 1, 4, '2024-06-04'),
    (5, 'CUSTOMER 2', 3, 2, '2024-06-05'),
    (6, 'CUSTOMER 3', 2, 1, '2024-06-06');


-- UPDATE 
UPDATE ORDERS
SET CUSTOMER_NAME='BOB'
WHERE PRODUCT_ID = 1;

--  DELETE 
DELETE FROM ORDERS
WHERE ORDER_ID = 5;

--  Q->CALCULATE THE TOTAL QUANTITY ORDERED FOR EACH PRODUCT CATEGORY IN THE ORDERS TABLE.

SELECT PRODUCTS.CATEGORY , SUM(ORDERS.QUANTITY) AS TOTAL_QUANTITY_ORDRED
FROM PRODUCTS
INNER JOIN ORDERS ON  PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT_ID
GROUP BY PRODUCTS.CATEGORY;


--  WITHOUT JOIN 
 SELECT 
    PRODUCTS.CATEGORY,
    SUM(ORDERS.QUANTITY) AS TOTAL_QUANTITY_ORDERED FROM 
    PRODUCTS, ORDERS  
 WHERE 
    PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT_ID  
 GROUP BY 
    PRODUCTS.CATEGORY;



--  Q -> FIND CATEGORIES WHERE THE TOTAL NUMBER OF PRODUCTS ORDERED IS GREATER THAN 5. 

SELECT PRODUCTS.CATEGORY , SUM(ORDERS.QUANTITY) AS TOTAL_QUANTITY_ORDRED
FROM PRODUCTS
INNER JOIN ORDERS ON  PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT_ID
GROUP BY PRODUCTS.CATEGORY
HAVING SUM(ORDERS.QUANTITY)>5;
